
//        fillBefore是指动画结束时画面停留在此动画的第一帧;
//        fillAfter是指动画结束时画面停留在此动画的最后一帧。

注：如果先位移，再旋转，如果这时候旋转动画设置的中心坐标值仍然是0.5,0.5，其实已经不是原地中心点旋转了，而是最初的位置的中心点


======================= AnimationSet 动画集合 =======================
//创建动画，参数表示他的子动画是否共用一个插值器
AnimationSet animationSet = new AnimationSet(true);
//添加子动画，子动画有需要的话可以自设延迟时间，持续时间
//rotateAnimation.setDuration(500);
//rotateAnimation.setStartOffset(1000);
animationSet.addAnimation(translateAnimation);
//设置插值器----匀速运动
animationSet.setInterpolator(new LinearInterpolator());
//设置动画持续时长
//        animationSet.setDuration(3000);
        //设置动画结束之后是否保持动画的目标状态
        animationSet.setFillAfter(true);
        //设置动画结束之后是否保持动画开始时的状态
        animationSet.setFillBefore(false);
        //设置重复模式
        animationSet.setRepeatMode(AnimationSet.REVERSE);
        //设置重复次数
        animationSet.setRepeatCount(1);
//        animationSet.setRepeatCount(AnimationSet.INFINITE);//无限循环
        //设置动画延时时间
//        animationSet.setStartOffset(2000);
        //取消动画
//        animationSet.cancel();
        //释放资源
//        animationSet.reset();
        //开始动画
        v.startAnimation(animationSet);


======================= TranslateAnimation 位移动画 =======================
TranslateAnimation(float fromXDelta, float toXDelta, float fromYDelta, float toYDelta)
float fromXDelta 动画开始的点离当前View X坐标上的差值
float toXDelta 动画结束的点离当前View X坐标上的差值
float fromYDelta 动画开始的点离当前View Y坐标上的差值
float toYDelta 动画开始的点离当前View Y坐标上的差值

======================= RotateAnimation 旋转动画 =======================
RotateAnimation (float fromDegrees, float toDegrees, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)
float fromDegrees：旋转的开始角度。
float toDegrees：旋转的结束角度。
int pivotXType：X轴的伸缩模式，可以取值为ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT。
float pivotXValue：X坐标的伸缩值。----------0-1,  0.5f表示中心位置旋转
int pivotYType：Y轴的伸缩模式，可以取值为 ABSOLUTE、RELATIVE_TO_SELF、RELATIVE_TO_PARENT。
float pivotYValue：Y坐标的伸缩值。----------0-1,  0.5f表示中心位置旋转
########！！！！！这个很重要，不然总会觉得动画错乱！！！！！##########
Animation.RELATIVE_TO_SELF：相对于自己的方式，这时候 pivotX/Y 取值如0-1
Animation.RELATIVE_TO_PARENT：相对于容器的方式，这时候 pivotX/Y 取值如0-1
Animation.ABSOLUTE：取绝对坐标位置点----默认方式，坐标0,0(pivotXValue,pivotYValue)表示动画控件的左上角

======================= ScaleAnimation 缩放动画 =======================
ScaleAnimation(float fromX, float toX, float fromY, float toY,int pivotXType, float pivotXValue, int pivotYType, float pivotYValue)
float fromX 动画起始时 X坐标上的伸缩尺寸
float toX 动画结束时 X坐标上的伸缩尺寸
float fromY 动画起始时Y坐标上的伸缩尺寸
float toY 动画结束时Y坐标上的伸缩尺寸
int pivotXType 动画在X轴相对于物件位置类型
float pivotXValue 动画相对于物件的X坐标的开始位置
int pivotYType 动画在Y轴相对于物件位置类型
float pivotYValue 动画相对于物件的Y坐标的开始位置

======================= AlphaAnimation 透明度动画 =======================
AlphaAnimation animation = new AlphaAnimation(1, 0);

======================= ValueAnimator 数值动画曲线 =======================
        valueAnimator = ValueAnimator.ofInt(fromX, toX);
        valueAnimator.setDuration(needTime);
        valueAnimator.setInterpolator(new AccelerateInterpolator());
        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animator) {
                if (isTouching) {
                    valueAnimator.cancel();
                } else {
                    TIME = 0;
                    value = (int) animator.getAnimatedValue();
                }
            }
        });
        valueAnimator.start();

======================= ObjectAnimator 属性动画 =======================
    ObjectAnimator.ofFloat(view, "translationY", view.getMeasuredHeight(), 0);
    ObjectAnimator.ofFloat(view, "scaleX", 1.0f, 1.4f, 0.9f, 1.0f);
    等等几种
    AnimatorSet set = new AnimatorSet();
                set.playTogether(
                        ObjectAnimator.ofFloat(view, "scaleX", 1.0f, 1.4f, 0.9f, 1.0f),
                        ObjectAnimator.ofFloat(view, "scaleY", 1.0f, 1.4f, 0.9f, 1.0f)
                );
                set.setDuration(duration);
                set.start();
    // 透明度动画
            ObjectAnimator.ofFloat(mAlphaImage, "alpha", 1, 0, 1)
                    .setDuration(4000)
                    .start();
    // 缩放
             final AnimatorSet animatorSet = new AnimatorSet();
             mScaleImage.setPivotX(mScaleImage.getWidth()+250);
             mScaleImage.setPivotY(mScaleImage.getHeight()+250);
             animatorSet.playTogether(
                     ObjectAnimator.ofFloat(mScaleImage, "scaleX", 1, 0)
                             .setDuration(2000),
                     ObjectAnimator.ofFloat(mScaleImage, "scaleY", 1, 0)
                             .setDuration(2000)
             );
             animatorSet.start();
    // 平移
            final AnimatorSet translationAnimatorSet = new AnimatorSet();
            translationAnimatorSet.playTogether(
                    ObjectAnimator.ofFloat(mTranslationImage, "translationX", 20, 100)
                            .setDuration(2000),
                    ObjectAnimator.ofFloat(mTranslationImage, "translationY", 20,100)
                            .setDuration(2000)
            );
            translationAnimatorSet.start();
    // 旋转
            final AnimatorSet rotateAnimationSet = new AnimatorSet();
            rotateAnimationSet.playTogether(
                    ObjectAnimator.ofFloat(mRotationImage, "rotation",0, 360)
                            .setDuration(2000)
            );
            rotateAnimationSet.start();
